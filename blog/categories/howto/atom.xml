<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: howto | Michael's Software Blog]]></title>
  <link href="http://michaeljcarey.github.io/blog/categories/howto/atom.xml" rel="self"/>
  <link href="http://michaeljcarey.github.io/"/>
  <updated>2015-09-10T14:28:00-07:00</updated>
  <id>http://michaeljcarey.github.io/</id>
  <author>
    <name><![CDATA[Michael J Carey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The World's Simplest Web Server]]></title>
    <link href="http://michaeljcarey.github.io/blog/2015/08/27/rpiwebsrv/"/>
    <updated>2015-08-27T11:13:03-07:00</updated>
    <id>http://michaeljcarey.github.io/blog/2015/08/27/rpiwebsrv</id>
    <content type="html"><![CDATA[<p>The world is changing and becoming more connected every day and the Internet of Things &lsquo;IoT&rsquo; is taking off like a rocket ship. What if you have an idea for a tiny embedded device and you wanted to control it through your browser or your smart phone? Here is an example of how to do just that. It uses a Raspberry Pi and a tiny program that simply reads the time.  Then it shows how to make a web server that will connect to the program and retrieve the time for any browser to show. Its got to be one of the world&rsquo;s simplest web servers.</p>

<p>In this example, I use a <a>Raspberry Pi</a> running on <a>Linux</a>, but in truth you can use any computer. The embedded program is written in Java and the web server programming is written with PHP, HTML and Javascript. A tiny bit of <a>AJAX</a> is introduced.</p>

<h4>The Basic Idea</h4>

<p>The graphic below shows how these objects are organized. Think about some device that you may want to use. Maybe you want to make a computerized sprinkler system for your yard or maybe you want to make a smart toaster. Those are what I mean when I say &lsquo;device&rsquo;. My simple device doesnt do anything fancy like like monitor a sprinkler system. It will only read the time from its hardware clock and report it to whoever requests it.  I named this program TimeServer and since I am programming it in java, the full name is TimeServer.Jar.</p>

<table> <tr><td>
<img class="Some name" src="/images/custom/webSrv/webSrv.gif" width="400" title="Block Diagram for the Simple Connected Device" >
</td></tr>
<tr><td>Fig. 1- The Simple Connected Device</td></tr>
</table>


<p><br>
The TimeServer actually does two things. As I already stated, it reads the time but it also needs a way to give to communicate to other things. The easiest and most generic way to communicate with devices is with <a>Sockets</a>. Think of it as like using a telephone line to call someone. The TimeServer just sits there waiting for somebody (or something) to call it and then ask for the time. The TimeServer responds with the time and then hangs up. This is why the graphic shows a TimeModel.java and a SocketServer.java inside of the TimeServer application.</p>

<p>With this approach, we can create any number of programs that can connect to the TimeServer and get the time. Not only that, the programs can be running locally on the same computer as the TimeServer or they can be running on any other external computer (as long as you can connect to the TimeServer across an ethernet connection).</p>

<p>In our example, we are going to have the Web Server create a SocketClient and use that to connect to the TimeServer. We will do this because we want any browser to display our time and browsers ultimately connect to web servers. To be perfectly honest, I am misusing the term Web Server a little bit. We are not actually writing a web server, as they are large complicated programs that are loaded with features. What we are doing is writing script to tell the web server what we want it to do. That is known as <a>server side scripting</a> and we are using <a>PHP</a> as the scripting language. Also included in our PHP scripts is some <a>HTML</a> and <a>Javascript</a>. Browsers speak the language of HTML and Javascript and the Web Server will send all of that over to any browser that initiates a connection.</p>

<h3>The TimeServer App</h3>

<p>My TimeServer consists of four classes.</p>

<ul>
<li>TimeModel.java - for reading and formatting the time</li>
<li>SocketServer.java - for handling a socket connection</li>
<li>TimeServer.java - the logic for reading and handling requests</li>
<li>TimeServerEntry.java - The main program which launches TimeServer in its own thread</li>
</ul>


<h4>The Time Model</h4>

<p>As you can see below, all TimeModel.java does is read the system time and format it.
<figure class='code'><figcaption><span>TimeModel.java  (TimeModel.java)</span> <a href='/downloads/code/webSrv/app/TimeModel.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.text.DateFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.SimpleDateFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by Michael Carey on 2/2/2015.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimeModel</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCurrentDateTime</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">DateFormat</span> <span class="n">dateFormat</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Date</span> <span class="n">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Date</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dateFormat</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">date</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>The Socket Server</h4>

<p>The socket server is also quite simple. When it is created, it is given a socket object which it uses to read and write messages (ReadLine and PrintLn).  The only other function is for closing the connection when it is done. Any errors will be output to the console that launched the app.
<figure class='code'><figcaption><span>SockServer.java  (SockServer.java)</span> <a href='/downloads/code/webSrv/app/SockServer.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by Michael J Carey on 1/30/2015.</span>
</span><span class='line'><span class="cm"> * Main socket concepts taken from LMU at</span>
</span><span class='line'><span class="cm"> * http://cs.lmu.edu/~ray/notes/javanetexamples/</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.Socket</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SockServer</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">private</span> <span class="n">Socket</span> <span class="n">socket</span><span class="o">;</span>
</span><span class='line'>	<span class="kd">private</span> <span class="n">BufferedReader</span> <span class="n">input</span><span class="o">;</span>
</span><span class='line'>	<span class="kd">private</span> <span class="n">PrintWriter</span> <span class="n">output</span><span class="o">;</span>
</span><span class='line'>	<span class="kd">private</span> <span class="kt">int</span> <span class="n">clientNumber</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	* Construct a socket server</span>
</span><span class='line'><span class="cm">	*/</span>
</span><span class='line'>	<span class="kd">public</span> <span class="nf">SockServer</span><span class="o">(</span><span class="n">Socket</span> <span class="n">_sock</span><span class="o">,</span> <span class="kt">int</span> <span class="n">_cNum</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">this</span><span class="o">.</span><span class="na">socket</span> <span class="o">=</span> <span class="n">_sock</span><span class="o">;</span>
</span><span class='line'>		<span class="k">this</span><span class="o">.</span><span class="na">clientNumber</span> <span class="o">=</span> <span class="n">_cNum</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">try</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span>
</span><span class='line'>							<span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>			<span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">PrintWriter</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;connected&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;socket died&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="c1">// accessors</span>
</span><span class='line'>	<span class="kd">public</span> <span class="n">String</span> <span class="nf">ReadLine</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">try</span> <span class="o">{</span>
</span><span class='line'>			<span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Error reading client# &quot;</span> <span class="o">+</span> <span class="n">clientNumber</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">e</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		<span class="k">return</span> <span class="s">&quot;Read Error&quot;</span><span class="o">;</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">Println</span><span class="o">(</span><span class="n">String</span> <span class="n">_str</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">output</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">_str</span> <span class="o">+</span> <span class="s">&quot;\n\r&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Error writing to client# &quot;</span> <span class="o">+</span> <span class="n">clientNumber</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="c1">// logic</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">Close</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="k">try</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;socket failed while closing client #  + clientNumber\n&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;connection with client # &quot;</span> <span class="o">+</span> <span class="n">clientNumber</span> <span class="o">+</span> <span class="s">&quot; closed.\n&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>	<span class="c1">// end func</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>	<span class="c1">// end class</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>The Time Server</h5>

<p>The TimeServer is really the heart of the app. It has no window or user interface and I want it to run in the background so I made the TimeServer work on its own thread. You can see that the class extends the &lsquo;Thread&rsquo; class which will allow me to do this. The TimeServer also creates instances of the TimeModel and SockServer classes that I have already introduced.</p>

<p>When your class exends the Thead class, you will need to implement the function run() as you see I have done in the source below.
In my case, the run function is simply a loop that listens for incoming messages from the socket. When it receives a message, it looks for a &ldquo;:&rdquo; and then a &ldquo;1&rdquo;. This is my idea of a super simple command structure. &ldquo;:1&rdquo;, &ldquo;:2&rdquo;, &ldquo;:3&rdquo;, etc. could be three different commands, although only &ldquo;:1&rdquo; is implemented in this demo. When it does get a &ldquo;:1&rdquo;, then it will respond get the time from the TimeModel and write it out to the SockServer.
<figure class='code'><figcaption><span>TimeServer.java  (TimeServer.java)</span> <a href='/downloads/code/webSrv/app/TimeServer.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by Michael J Carey on 1/30/2015.</span>
</span><span class='line'><span class="cm"> * Main socket concepts taken from LMU at</span>
</span><span class='line'><span class="cm"> * http://cs.lmu.edu/~ray/notes/javanetexamples/</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.ServerSocket</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.Socket</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">TimeServer</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>	<span class="n">TimeModel</span> <span class="n">timeModel</span><span class="o">;</span>
</span><span class='line'>	<span class="n">SockServer</span> <span class="n">sckSrv</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * Constructs a handler thread for a given socket.</span>
</span><span class='line'><span class="cm">	 * This thread will accept queries for time and will</span>
</span><span class='line'><span class="cm">	 * return a formatted time.</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="nf">TimeServer</span><span class="o">(</span><span class="n">Socket</span> <span class="n">_sock</span><span class="o">,</span> <span class="kt">int</span> <span class="n">_cNum</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">timeModel</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TimeModel</span><span class="o">();</span>
</span><span class='line'>		<span class="n">sckSrv</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SockServer</span><span class="o">(</span><span class="n">_sock</span><span class="o">,</span> <span class="n">_cNum</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * The run method of this thread.</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;The Time Server is running on new thread&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="c1">// repeatedly get commands from the client and process them</span>
</span><span class='line'>		<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">String</span> <span class="n">command</span> <span class="o">=</span> <span class="n">sckSrv</span><span class="o">.</span><span class="na">ReadLine</span><span class="o">();</span>
</span><span class='line'>			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;received from client: &quot;</span> <span class="o">+</span> <span class="n">command</span><span class="o">);</span>
</span><span class='line'>			<span class="k">if</span> <span class="o">(</span><span class="n">command</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>				<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;breaking from while loop\n&quot;</span><span class="o">);</span>
</span><span class='line'>				<span class="k">break</span><span class="o">;</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>			<span class="k">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;:&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>				<span class="kt">int</span> <span class="n">location</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>				<span class="k">if</span> <span class="o">(</span><span class="n">location</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>					<span class="n">sckSrv</span><span class="o">.</span><span class="na">Println</span><span class="o">(</span><span class="n">timeModel</span><span class="o">.</span><span class="na">getCurrentDateTime</span><span class="o">());</span>
</span><span class='line'>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;time was printed&quot;</span><span class="o">);</span>
</span><span class='line'>				<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>					<span class="n">sckSrv</span><span class="o">.</span><span class="na">Println</span><span class="o">(</span><span class="s">&quot;huh? only 1 is supported.\r&quot;</span><span class="o">);</span>
</span><span class='line'>				<span class="o">}</span>
</span><span class='line'>			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>				<span class="n">sckSrv</span><span class="o">.</span><span class="na">Println</span><span class="o">(</span><span class="s">&quot;what? I only understand colons.\r&quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>		<span class="o">}</span>	<span class="c1">// end while</span>
</span><span class='line'>		<span class="n">sckSrv</span><span class="o">.</span><span class="na">Close</span><span class="o">();</span>
</span><span class='line'>	<span class="o">}</span>	<span class="c1">// end func</span>
</span><span class='line'><span class="o">}</span>	<span class="c1">// end class</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>The Entry Point (The Main)</h4>

<p>The entry point is really just a way to start my app. It creates a ServerSocket on <a>port</a> number 444 and then enters a loop where it listens for connections. When it gets a connection, it accepts it and creates a new TimeServer object which will be launched on its own thread. The start() call is what kicks off the thread&rsquo;s run() function.
<figure class='code'><figcaption><span>TimeServerEntry.java  (TimeServerEntry.java)</span> <a href='/downloads/code/webSrv/app/TimeServerEntry.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.net.ServerSocket</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimeServerEntry</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>		<span class="kt">int</span> <span class="n">clientNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>		<span class="kt">int</span> <span class="n">portNum</span> <span class="o">=</span> <span class="mi">444</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">ServerSocket</span> <span class="n">listener</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ServerSocket</span><span class="o">(</span><span class="mi">444</span><span class="o">);</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Welcome to Tiny Web Server: The Socket Server is running&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="k">try</span> <span class="o">{</span>
</span><span class='line'>			<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>				<span class="k">new</span> <span class="nf">TimeServer</span><span class="o">(</span><span class="n">listener</span><span class="o">.</span><span class="na">accept</span><span class="o">(),</span> <span class="n">clientNumber</span><span class="o">++).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>			<span class="n">listener</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><br></p>

<h3>The Web Server Script</h3>

<p>Whenever a browser connects with a web server, the web server will (if on Linux) go to /var/www and look for index.htm to pass on to the browser. But in this case, I have placed a php file named <a>index.php</a> along with some other files into the <a>/var/www</a> directory.
These files are:</p>

<ul>
<li>index.php - standard html and javascript for output to browsers</li>
<li>getTime.php - script for creating a socket and communicating with the TimeServer</li>
<li>header.php - standard header</li>
<li>admin.css - some formatting</li>
</ul>


<p>Fig 2. shows what the browser will initially dislplay</p>

<table><tr><td>
<img class="Some name" src="/images/custom/webSrv/TimeServerInit.png" width="800" title="Image from browser" >
</td></tr>
<tr><td>Fig. 2- Initial Output to Browser</td></tr>
</table>


<p><br></p>

<h4>header.php</h4>

<p>The header is pretty standard. It describes basic information for the browser such as the html version and some metadata.  It also includes our admin.css file. The admin.css file (not shown) defines what colors and styles you want html objects like buttons and text fields to be. Our header.php is loaded by the index.php file.
<figure class='code'><figcaption><span>header.php  (header.php)</span> <a href='/downloads/code/webSrv/www/header.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;HEAD&gt;</span>
</span><span class='line'><span class="nt">&lt;TITLE&gt;</span>Simple TimeServer<span class="nt">&lt;/TITLE&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">content=</span><span class="s">&quot;text/html;charset=utf-8&quot;</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;LINK</span> <span class="na">REL=</span><span class="s">stylesheet</span> <span class="na">HREF=</span><span class="s">&quot;admin.css&quot;</span> <span class="na">TYPE=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>index.php</h4>

<p>If you look at the index.php file below, you can see that it is actually written with three different languages. The first three lines are written in php and load the header. The second section is Javascript which will be explained shortly. The bottom section is HTML and defines a table with buttons and text fields. The buttons <a>onClick</a> properties call the above Javascript functions. The text fields are written with the &lsquo;div&rsquo; tag and have id&rsquo;s so that the Javascript can search for them in the <a>document</a> and replace their displayed text.</p>

<p><figure class='code'><figcaption><span>index.php  (index.php)</span> <a href='/downloads/code/webSrv/www/index.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;?php </span>
</span><span class='line'><span class="cp">include(&quot;header.php&quot;); </span>
</span><span class='line'><span class="cp">?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">timerIsOn</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">startStopTimer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">myId</span> <span class="o">=</span> <span class="s2">&quot;myTimeStream&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="nx">timerIsOn</span><span class="o">==</span><span class="kc">true</span><span class="p">)</span>  <span class="p">{</span>			<span class="c1">// if timer is on</span>
</span><span class='line'>		<span class="nx">timerIsOn</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>				<span class="c1">// toggle timer flag to off</span>
</span><span class='line'>		<span class="nx">clearInterval</span><span class="p">(</span><span class="nx">myTimer</span><span class="p">);</span>
</span><span class='line'>		<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">myId</span><span class="p">).</span><span class="nx">innerHTML</span><span class="o">=</span> <span class="s2">&quot;Halted&quot;</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>											<span class="c1">// else if timer is off</span>
</span><span class='line'>		<span class="nx">timerIsOn</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>					<span class="c1">// toggle timer flag to on</span>
</span><span class='line'>		<span class="nx">myTimer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">loadXMLDoc</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>		<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">myId</span><span class="p">).</span><span class="nx">innerHTML</span><span class="o">=</span> <span class="s2">&quot;Running&quot;</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">loadXMLDoc</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">xmlhttp</span><span class="p">;</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">XMLHttpRequest</span><span class="p">)</span>	<span class="p">{</span> <span class="c1">// code for IE7+, Firefox, Crome, Opera, Safari</span>
</span><span class='line'>		<span class="nx">xmlhttp</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// code for IE6, IE5</span>
</span><span class='line'>		<span class="nx">xmlhttp</span><span class="o">=</span><span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;Microsoft.XMLHTP&quot;</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">onreadystatechange</span><span class="o">=</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">readyState</span><span class="o">==</span><span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">status</span><span class="o">==</span><span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">myId</span><span class="p">;</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="nx">state</span> <span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>	
</span><span class='line'>				<span class="nx">myId</span><span class="o">=</span><span class="s2">&quot;myTime&quot;</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">state</span><span class="o">==</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="nx">myId</span><span class="o">=</span><span class="s2">&quot;func2&quot;</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">myId</span><span class="p">).</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>	<span class="c1">// end func pointer</span>
</span><span class='line'>	<span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;getTime.php?state=&quot;</span> <span class="o">+</span> <span class="nx">state</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>	<span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;TABLE&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;&lt;TH</span> <span class="na">colspan=</span><span class="s">2</span><span class="nt">&gt;</span>Time Web Server Demo<span class="nt">&lt;/TH&gt;&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;&lt;TH&gt;</span>Action<span class="nt">&lt;/TH&gt;&lt;TH&gt;</span>Description<span class="nt">&lt;/TH&gt;&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>	<span class="nt">&lt;TD&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&#39;Get Once&#39;</span> <span class="na">onClick=</span><span class="s">&quot;loadXMLDoc(1)&quot;</span> <span class="nt">&gt;&lt;/TD&gt;</span>
</span><span class='line'>	<span class="nt">&lt;TD&gt;&lt;div</span> <span class="na">id=</span><span class="s">&quot;myTime&quot;</span><span class="nt">&gt;&lt;a&gt;</span> Disconnected <span class="nt">&lt;/a&gt;&lt;/div&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>	<span class="nt">&lt;TD&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&#39;Observe Time&#39;</span> <span class="na">onClick=</span><span class="s">&quot;startStopTimer()&quot;</span> <span class="nt">&gt;&lt;/TD&gt;</span>
</span><span class='line'>	<span class="nt">&lt;TD&gt;&lt;div</span> <span class="na">id=</span><span class="s">&quot;myTimeStream&quot;</span><span class="nt">&gt;&lt;a&gt;</span> Push to Continually Update<span class="nt">&lt;/a&gt;&lt;/div&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;TR&gt;</span>
</span><span class='line'>	<span class="nt">&lt;TD&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&#39;Call Another Function&#39;</span> <span class="na">onClick=</span><span class="s">&quot;loadXMLDoc(2)&quot;</span> <span class="nt">&gt;&lt;/TD&gt;</span>
</span><span class='line'>	<span class="nt">&lt;TD&gt;&lt;div</span> <span class="na">id=</span><span class="s">&quot;func2&quot;</span><span class="nt">&gt;&lt;a&gt;</span> Not Supported <span class="nt">&lt;/a&gt;&lt;/div&gt;&lt;/TD&gt;</span>
</span><span class='line'><span class="nt">&lt;/TR&gt;</span>
</span><span class='line'><span class="nt">&lt;/TABLE&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Look in the HTML section and find the first button.  You can see that its onclick property will call the loadXMLDoc function and pass a 1 as a parameter. Now look up in the Javascript section and find the loadXMLDoc(state) function.
<code>html
&lt;TR&gt;
  &lt;TD&gt;&lt;input type="button" value='Get One Time' onClick="loadXMLDoc(1)" &gt;&lt;/TD&gt;
  &lt;TD&gt;&lt;div id="myTime"&gt;&lt;a&gt;Disconnected&lt;/a&gt;&lt;/div&gt;&lt;/TD&gt;
&lt;/TR&gt;
</code></p>

<p>The function <a>loadXMLDoc</a> first creates a <a>XMLHttpRequest</a> object. This powerful Javascript object provides an easy way to retrieve data from a URL and update just a part of the page without having to do a full page refresh. This object is the basis for <a>AJAX</a> programming.</p>

<p>It then sets an inline function to the XMLHttpRequest&rsquo;s <a>onreadystatechange</a> event. This event will be fired and the function will be invoked when the TimeServer response is ready to be processed. The function itself looks into the html document and finds the element by the id. In this example; it searches for the object with the id &ldquo;myTime&rdquo; and then replaces the objects text with the TimeServer&rsquo;s response text.</p>

<p>Next, we want to use the XMLHttpRequest to send a request to the TimeServer to retrieve the time.  To do this, we need to use the open method to specify the type of request, the URL and whether the request is syncronous or not. Then we need to call send like so:
<code>javascript
  xmlhttp.open("GET", "getTime.php?state=" + state.toString(), true);
  xmlhttp.send();
</code></p>

<h4>getTime.php</h4>

<p>Once the user presses the button, the GET is called on getTime.php and the parameter &ldquo;1&rdquo; is passsed in and stored in the property $s. Then the code switches on $s and runs case &ldquo;1&rdquo;. The codeblock of case 1 creates a client socket and connects to the <a>localhost</a> on port 444 which is the TimeServer App. If everything is successfull, we form the message to send &ldquo;:1&rdquo; and call socket_write. After we are sure that the entire message is written, we call socket_read and set the return value into $rdVal. We <a>echo</a> the result, shutdown the socket and then close it.</p>

<p><figure class='code'><figcaption><span>getTime.php  (getTime.php)</span> <a href='/downloads/code/webSrv/www/getTime.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>	<span class="nv">$s</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;state&quot;</span><span class="p">];</span>
</span><span class='line'>	<span class="c1">//echo &quot;here&quot; .$s;</span>
</span><span class='line'>	
</span><span class='line'>	<span class="k">switch</span> <span class="p">(</span><span class="nv">$s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">case</span> <span class="s2">&quot;0&quot;</span><span class="o">:</span>
</span><span class='line'>			<span class="k">echo</span> <span class="s2">&quot;open clock server program&quot;</span><span class="p">;</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>			
</span><span class='line'>		<span class="k">case</span> <span class="s2">&quot;1&quot;</span> <span class="o">:</span>
</span><span class='line'>			<span class="nv">$host</span> <span class="o">=</span> <span class="s2">&quot;localhost&quot;</span><span class="p">;</span><span class="c1">//&quot;192.168.1.131&quot;; //gethostbyname(&quot;www.example.com&quot;);</span>
</span><span class='line'>			<span class="nv">$port</span> <span class="o">=</span> <span class="mi">444</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$clientSck</span> <span class="o">=</span> <span class="nb">socket_create</span><span class="p">(</span><span class="nx">AF_INET</span><span class="p">,</span> <span class="nx">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">// no apparent error</span>
</span><span class='line'>				<span class="nv">$errorcode</span> <span class="o">=</span> <span class="nb">socket_last_error</span><span class="p">();</span>
</span><span class='line'>				<span class="nv">$errormsg</span> <span class="o">=</span> <span class="nb">socket_strerror</span><span class="p">(</span><span class="nv">$errorcode</span><span class="p">);</span>
</span><span class='line'>				<span class="k">die</span><span class="p">(</span><span class="s2">&quot;Could not create socket: [</span><span class="si">$errorcode</span><span class="s2">] </span><span class="si">$errormsg</span><span class="s2"> </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="c1">//echo &quot;created&quot;;</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$result</span> <span class="o">=</span> <span class="nb">socket_connect</span><span class="p">(</span><span class="nv">$clientSck</span><span class="p">,</span> <span class="nv">$host</span><span class="p">,</span> <span class="nv">$port</span><span class="p">))</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="k">echo</span> <span class="s2">&quot;socket_connect() failed, reason: &quot;</span><span class="o">.</span><span class="nb">socket_strerror</span><span class="p">(</span><span class="nb">socket_last_error</span><span class="p">())</span><span class="o">.</span><span class="s2">&quot; </span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>				<span class="k">die</span><span class="p">(</span><span class="s2">&quot;Could not connnect to server</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="c1">//echo &quot;connected&quot;;</span>
</span><span class='line'>		
</span><span class='line'>			<span class="nv">$msg</span> <span class="o">=</span> <span class="s2">&quot;:1&quot;</span> <span class="o">.</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>			<span class="nv">$len</span> <span class="o">=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$msg</span><span class="p">);</span>
</span><span class='line'>			<span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="nv">$sent</span> <span class="o">=</span> <span class="nb">socket_write</span><span class="p">(</span><span class="nv">$clientSck</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">,</span> <span class="nv">$len</span><span class="p">);</span>
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="nv">$sent</span> <span class="o">===</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="k">break</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>				
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="nv">$sent</span> <span class="o">&lt;</span> <span class="nv">$len</span><span class="p">)</span> <span class="p">{</span>			<span class="c1">// check until entire message is sent</span>
</span><span class='line'>					<span class="nv">$msg</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$msg</span><span class="p">,</span> <span class="nv">$sent</span><span class="p">);</span>	<span class="c1">// continue getting the message</span>
</span><span class='line'>					<span class="nv">$len</span> <span class="o">-=</span> <span class="nv">$sent</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>					<span class="k">break</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="c1">//echo &quot;written&quot;;</span>
</span><span class='line'>
</span><span class='line'>			<span class="nv">$rdVal</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>			<span class="nv">$rdVal</span> <span class="o">=</span> <span class="nb">socket_read</span><span class="p">(</span><span class="nv">$clientSck</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="nx">PHP_NORMAL_READ</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">echo</span> <span class="s2">&quot;Output: &quot;</span> <span class="o">.</span> <span class="nv">$rdVal</span><span class="p">;</span>
</span><span class='line'>			<span class="nb">socket_shutdown</span><span class="p">(</span><span class="nv">$clientSck</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>		<span class="c1">// housekeeping</span>
</span><span class='line'>			<span class="nb">socket_close</span><span class="p">(</span><span class="nv">$clientSck</span><span class="p">);</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>			
</span><span class='line'>		<span class="k">case</span> <span class="s2">&quot;2&quot;</span> <span class="o">:</span>
</span><span class='line'>			<span class="k">echo</span> <span class="s2">&quot;You can service other commands in this switch statement&quot;</span><span class="p">;</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>			
</span><span class='line'>		<span class="k">default</span><span class="o">:</span>
</span><span class='line'>			<span class="k">echo</span> <span class="nv">$s</span><span class="p">;</span>
</span><span class='line'>			<span class="k">break</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The echoed result from getTime.php is captured by the XMLHttpRequest object&rsquo;s GET function. This triggers the <a>onReadyStateChange</a> event to fire and run our defined function(). Remember, the function searches our document for the element with the id of &ldquo;myTime&rdquo; and copies the responseText (from the echo) into the element&rsquo;s <a>innerHTML</a> thereby replacing the displayed text.</p>

<h4>Get Continual Time Updates</h4>

<p>In order to get the time to update automatically, we have to create a timer in Javascript. The second button&rsquo;s onClick method calls the Javascript startStopTimer().  Here, we evaluate a flag called <a>timerIsOn</a> to decide whether to start or stop the timer.
If the timer is on, then we toggle the flag to off, then call <a>clearInterval</a> to stop the timer and then search the document for the element with the id of &ldquo;myTimeStream&rdquo; and replace the text with &ldquo;Halted&rdquo;.</p>

<p>If the timer is off, then we toggle the flag to on and then start the timer with the call <a>setInterval</a> and pass in a function pointer and the desired interval (in milliseconds). This simply means that the function will be called at the desired interval while the timer is running. Finally, we search for the element with the id of &ldquo;myTimeStream&rdquo; and replace the text with &ldquo;Running&rdquo;.</p>

<p>In our case, we call loadXMLDoc(1) every second and as a result, you should see the time update every second.</p>

<table><tr><td>
<img class="Some name" src="/images/custom/webSrv/TimeServer.png" width="800" title="Image from browser" >
</td></tr>
<tr><td>Fig. 3- Output to Browser</td></tr>
</table>


<p><br></p>

<h3>Putting it All Together</h3>

<p>Compile the java project and export as a <a>jar</a> file. I compiled the project on my laptop and copied it to a projects folder on my raspberry pi.
Then open a terminal and navigate to the folder where your jar file is located.  Then launch the TimeServer with the following command.
<code>bash
java -jar myJavaProject.jar
</code></p>

<p>You should see the output on your terminal.
To test your project, you can open your browser on the raspberry pi and type localhost in the url. You should see the initial dislay. I could not get the browsers on the raspberry pi to actually work. I am guessing that these browsers are not fully capable since the raspberry pi si such a small computer. But at least you should be able to see the initial display of the buttons and text.</p>

<p>Now open a browser on an different computer on the same network as the raspberry pi and type the ip address into the URL. Again, you should see the initial screen. Press the Button labeled &lsquo;Get Once&rsquo; and watch the time update. Then press the button labeled &lsquo;Observe Time&rsquo;. The description should toggle to &lsquo;Running&rsquo; and the Time should update continuously. If you press the button again, then the updates should stop.</p>

<h3>Summary</h3>

<p>Congratulations, you have just made a super tiny and simple web server using very inexpensive hardware. You can now add more functionality to your java program and extend the web page and make anything you desire. Go ahead and make your sprinkler system or security camera or whatever.  You will be able to interact with your device using the browser on your cell phone or desktop.</p>

<p>Go ahead and do cool stuff.</p>

<p><meta itemprop="name" content="The World's Simplest Web Server" />
<meta itemprop="image" content="https://michaeljcarey.github.io/images/custom/webSrv/webSrv.gif" />
<meta itemprop="description" content="Turn your Raspberry Pi into the world's simplest web server using cool technologies like AJAX, Sockets, Java, Javascript and PHP." /></p>

<p><meta name="description" content="Turn your Raspberry Pi into the world's simplest web server using cool technologies like AJAX, Sockets, Java, Javascript and PHP." />
<meta name="author" content="Michael J Carey" /></p>

<!-- 
<meta property="article:author" content="[ GOOGLE+ AUTHOR URL ]" />
-->


<p><meta property="article:published_time" content="2015-09-10 20:45:18 UTC" />
<meta property="article:section" content="Raspberry Pi Web Server" /></p>

<p><meta property="og:title" content="The World's Simplest Web Server" />
<meta property="og:type" content="article" />
<meta property="og:description" content="Turn your Raspberry Pi into the world's simplest web server using cool technologies like AJAX, Sockets, Java, Javascript and PHP." />
<meta property="og:image" content="https://michaeljcarey.github.io/images/custom/webSrv/webSrv.gif" />
<meta property="og:url" content="https://michaeljcarey.github.io/blog/2015/08/27/rpiwebsrv/" />
<meta property="og:site_name" content="michaeljcarey.github.io" /></p>

<p><meta name="twitter:card" content="summary">
<meta name="twitter:title" content="The World's Simplest Web Server">
<meta name="twitter:description" content="Turn your Raspberry Pi into the world's simplest web server using cool technologies like AJAX, Sockets, Java, Javascript and PHP.">
<meta name="twitter:image" content="https://michaeljcarey.github.io/images/custom/webSrv/webSrv.gif">
<meta name="twitter:url" content="https://michaeljcarey.github.io/blog/2015/08/27/rpiwebsrv/"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging Basics III, Make Your Octopress Blog Active with Comments, Analytics and Product Links]]></title>
    <link href="http://michaeljcarey.github.io/blog/2015/08/12/blogbasics3/"/>
    <updated>2015-08-12T11:25:22-07:00</updated>
    <id>http://michaeljcarey.github.io/blog/2015/08/12/blogbasics3</id>
    <content type="html"><![CDATA[<p>Welcome to Part 3 of &lsquo;Blogging Basics - Make Your Octopress Blog Site Active with Comments, Analytics and Monetization&rsquo;.  How do you know what others are thinking about your blog, how many people visit your site and what are they doing when they are there?  If you can gain this kind of insight, you can tune your blog for more interest and you can even add advertising links to monetize your site.  This post can get you started on your way to more hits and popularity.</p>

<!-- more -->


<h2>Add Comments with Disqus</h2>

<p>Despite Octopress being a static site, comments can be added to your posts via Disqus.  Disqus is already set up for you. All you need to do is create a Disqus account and register for a new forum.  <a href="https://help.disqus.com/customer/portal/articles/931017-registering-a-new-forum">https://help.disqus.com/customer/portal/articles/931017-registering-a-new-forum</a></p>

<p>The only thing left to do is to set the properties in _config.yml.</p>

<pre><code class="yaml _config.yml https://michaeljcarey.github.io Source Article">disqus_show_comment_count: true
disqus_short_name: YOUR_DISQUS_ACCOUNT
</code></pre>

<p>And then make sure that your blog entries have the comments: true option on top.</p>

<h2>Add Google Analytics for Tracking and Monitization</h2>

<p>Google Analytics can track how many people go to your site as well as other things like how long they spend on your site and where they are from.  To utilize this feature, go to the Google Analyitics web site, create an account and get your account id.
If you navigate to Admin/Tracking Info/Tracking Code then you will see your tracking code snip.
Google Analytics instructs you to place their code snippet in all of your html files.  But it looks like Octopress has already provided a mechanism for this.  In <em>includes/ there is a google_analytics.html file and if you include that file in </em>includes/after_footer.html then it will pick up the google_analytics_tracking_id in the _config.yml.</p>

<pre><code class="yaml Add to bottom of _includes/after_footer.html https://michaeljcarey.github.io Source Article">
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-66060669-1']);
    _gaq.push(['_setDomainName','github.io']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>


</code></pre>

<p>I have seen other Octopress bloggers take the script that Google Analytics provides and copy it into the _includes/google_analytics.html file, but I dont think that is necessary.</p>

<p>Other <a href="http://stefanalfbo.github.io/blog/2013/04/17/octopress-google-analytics-github-pages/">Octopress bloggers</a> recommend adding an additional line into _includes/google_analytics.html like this:</p>

<pre><code class="yaml _includes/google_analytics.html https://michaeljcarey.github.io Source Article">    _gaq.push(['_setAccount', 'UA-66060669-1']);
    _gaq.push(['_setDomainName','github.io']);
    _gaq.push(['_trackPageview']);
</code></pre>

<p>When you follow these instructions, then you are able to log onto Google Analytics and view all the information about page hits.  Spend some time looking through and learning all that google offers.</p>

<h2>Display Page Hit Counters on Your Blog</h2>

<p>If you want to display page hits on your blog and pages, then you will need to add XXX to your Octopress pages which will instruct Octopress to go to google analytics and retrieve the hit counts for dislplay.</p>

<p>I dont yet have this display of code hits working quite yet.  But I do see a couple of different ways to do this. I have not used StatCounter, but maybe it works well.</p>

<p>XXXFor others to see also, you can use a third-party API that uses JavaScript. The third-party service tracks pageviews for you and then provides you with a JavaScript snippet that you paste your sidebar or where ever you want the pageviews to show up. StatCounter is an example (didn&rsquo;t verify if it is a good service or not).</p>

<p>There are two other plugins that Octopress provides; jekyll-ga and octopress-page-view.</p>

<p>I am trying page-view over jekyll-ga because I dont see in the jekyll writeup how to display the analytics while page-view does show an example.</p>

<p>I am not sure how  to deal with the google analytics error &lsquo;missing tracking code&rsquo;.  I am currently trying to get the verification for the missing tracking code.  This verification is pending&hellip;  more to follow.  Ok, I finally got this resolved.  But I still do not see my hit counters incrementing.</p>

<h2>Add Google&rsquo;s AdSense to Octopress</h2>

<p>Create an AdSense Account.  Go to the Adsense signup page  <a href="https://www.google.com/adsense/signup">https://www.google.com/adsense/signup</a> and fill out the form.  Once that is done, you will have to wait for an initial approval.  Once you get that, then log on and create an AdUnit.
Name the AdUnit and select what kind of AdUnit you wish.  Then copy the generated script for pasting into your website.</p>

<p>I elected to place a leaderboard ad just above my blog comment section.  To do this, open source/_layouts/post.html and paste the previously copied script just above the &lt;h1>Comments&lt;/h1> section".</p>

<p>Now after generating and previewing your page, you should see a blank gap just above the comments.  This is due to a wait period for google to review and approve your site for ads.</p>

<p>Next, you will want to link your AdSense account to your Google Analytics site.  I was able to click the &lsquo;link&rsquo; action in the AdSense/Google Analytics Integration page which took me to the Google Analytics site where I was able to finish connecting the link.  Now Google Analytics shows that I have linked my Adsense account.</p>

<p>I still have not entered any bank account information so that Google could actually pay me, but I also need to get more traffic for that to happen.</p>

<p>More to come.</p>

<p>gem list &ndash;local</p>

<h2>Add Webmaster Tools</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging Basics II, How to Configure and Edit Your Blog Site in Octopress]]></title>
    <link href="http://michaeljcarey.github.io/blog/2015/08/06/startingmyblog2howtowriteapost/"/>
    <updated>2015-08-06T18:08:29-07:00</updated>
    <id>http://michaeljcarey.github.io/blog/2015/08/06/startingmyblog2howtowriteapost</id>
    <content type="html"><![CDATA[<p>Welcome to Part 2 of &lsquo;Blogging Basics - How to Configure and Edit Your Blog Site in Octopress&rsquo;.  Now that we have successfully set up a Basic Octopress Blog site and written our first posts, we are ready to tune up the Blog site and add more functionality.</p>

<!-- more -->


<h2>Configuring Octopress</h2>

<p>When you first start with Octopress, you get a pretty basic layout.<br/>
<img src="/images/custom/Selection_002.png" width="890" height="280"></p>

<p>How do you change the boarder?  How to you add to the Menu Bar and the right column where &lsquo;Recent Posts&rsquo; resides?
What are Templates and Themes and how are they and rss feeds used?
I found that and more on at Octopress' docs &ldquo;Configuring Octopress&rdquo; <a href="http://http://octopress.org/docs/configuring/">http://http://octopress.org/docs/configuring/</a> to be quite informative.  I followed that doc and others to get my blog to look professional.</p>

<p>These are some of the cool things I learned:</p>

<h2>Change the banner</h2>

<p>In <em>config.yml, edit here to change title, author &amp;c.x
<figure class='code'><figcaption><span></em>config.yml <a href="https://michaeljcarey.github.io">https://michaeljcarey.github.io</a> Source Article</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Main Configs&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;url: &lt;a href=&quot;http:/</span><span class="o">/</span><span class="n">michaeljcarey</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span><span class="s2">&quot;&gt;http://michaeljcarey.github.io&lt;/a&gt;</span>
</span><span class='line'><span class="s2">title: Michael J Carey</span>
</span><span class='line'><span class="s2">subtitle: Programming my life away and enjoying the ride</span>
</span><span class='line'><span class="s2">author: Michael J Carey</span>
</span><span class='line'><span class="s2">simple_search: &lt;a href=&quot;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">www</span><span class="o">.</span><span class="n">google</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">search</span><span class="s2">&quot;&gt;https://www.google.com/search&lt;/a&gt;</span>
</span><span class='line'><span class="s2">description: Programming for motion, control and robotics in the hobby and industrial sectors.</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Add pages to the paginator (menu bar)</h2>

<p>Lets put an &lsquo;About&rsquo; Item on the menu bar.</p>

<p>In the root directory, create a folder with the name &lsquo;about&rsquo; and then add a index.markdown file.</p>

<p>In the bash shell, add a page and name it about.  It will create a directory off root with that name.  The file /about/index.markdown has also been created.
<figure class='code'><figcaption><span>Create a Page  <a href="https://michaeljcarey.github.io">https://michaeljcarey.github.io</a> Source Article</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">new_page</span><span class="o">[</span><span class="n">about</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;creates /sou</span><span class="n">rce</span><span class="o">/</span><span class="n">about</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">markdown</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;vi index.markdown</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Edit the index.markdown file.</p>

<pre><code class="ruby /about/index.markdown https://michaeljcarey.github.io Source Article">---
layout: page
title: "About Michael J Carey"
comments: true
sharing: true
footer: true
---
Ice cream is good for you because it makes you happy.
</code></pre>

<p>Now add the page to the pagenator (menubar).  Edit the navigation.html in /source/_includes/custom
<code>ruby Add Page to the Menu Bar https://michaeljcarey.github.io Source Article
cd source/_includes/custom
vi navigation.html
</code>
So that it includes the about group.
<figure class='code'><figcaption><span>navigation.html <a href="https://michaeljcarey.github.io">https://michaeljcarey.github.io</a> Source Article</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'>
</span><span class='line'>##Add a Pages to the Sidebar
</span><span class='line'>Lets say we wanted to add a page onto the sidebar.  In this example our page is called &#39;FruitFav&#39; which contain a set of favorite fruits.
</span><span class='line'>Create and edit &#39;source/_includes/custom/asides/FruitFav.html&#39;
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>cd source/_includes/custom/asides
</span><span class='line'>vi FruitFav.html
</span></code></pre></td></tr></table></div></figure></p>

<p>and the file might look like this:
<figure class='code'><figcaption><span>FruitFav.html <a href="https://michaeljcarey.github.io">https://michaeljcarey.github.io</a> Source Article</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h3&gt;</span>My Favorite Fruit<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Lychee<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Durian<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Bacon<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'>Edit your _config.yml file and find the line with default_asides and add /custom/asides/FruitFav.html
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>default_asides: [asides/recent_posts.html, custom/asides/FruitFav.html, asides/github.html, <span class="ni">&amp;hellip;</span>]
</span></code></pre></td></tr></table></div></figure></p>

<p>The above example is somewhat static.  What if I want to put my Category List in the sidebar? The categories should be discovered dynamically and they should provide links to all the posts in that category.  For dynamic category action, I followed a path described by
<a href="http://kaworu.github.io/octostrap3/blog/2013/10/03/category-list-aside/">http://kaworu.github.io/octostrap3/blog/2013/10/03/category-list-aside/</a>
but it didnt look good because I needed to install Octostrap3 theme.  When I did that it looked better but it changed too many things for my taste.  I then decided to change back to the classic theme.</p>

<h2>Change a Theme</h2>

<pre><code class="yaml To Change Back to the default Classic Theme https://michaeljcarey.github.io Source Article">rake install[classic]
rake generate
</code></pre>

<p>After I did this I noticed that my posts dissappeared from the paginator.  After hunting around I found that the property paginate_path in _config.yml was set to &ldquo;blog/posts/:num&rdquo;.  Once I changed to &ldquo;posts/:num&rdquo; I got it back.</p>

<h2>Install a Plugin</h2>

<p>I decided to use the ctdk/octopress-category-list plugin.<br/>
<a href="https://github.com/ctdk/octopress-category-list">https://github.com/ctdk/octopress-category-list</a>
<a href="https://github.com/ctdk/octopress-category-list">https://github.com/ctdk/octopress-category-list</a>
Download the plugin and follow the instructions in the readme file.  Add the plugin into the ./plugins directory and (in this case) copy the template (html) files into ./source/<em>includes/custom/asides directory and then add the template file names into the default_asides list of </em>config.yml file.</p>

<h2>How to get social</h2>

<p>With facebook, linkedin, etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging Basics I, How to Create a Post on Your Octopress Blog]]></title>
    <link href="http://michaeljcarey.github.io/blog/2015/08/05/myfirstpost/"/>
    <updated>2015-08-05T13:02:04-07:00</updated>
    <id>http://michaeljcarey.github.io/blog/2015/08/05/myfirstpost</id>
    <content type="html"><![CDATA[<p>Welcome to my first post (or is it a page).  This post is an experimental platform for me to learn how to blog. In addition, I am able to share my experiences with others who may find themselves walking down similar paths.
First off, my blogging platform is powered by Octopress and it is being hosted by the github repository.</p>

<p>This article &ldquo;How to Create a Post on Your Octopress Blog&rdquo; shows how to set up and edit a post.  It also demonstrates how to place certain wigits such as images, video and &lsquo;code blocks&rsquo; onto the post. The follow up article &ldquo;How to Configure and Edit Your Blog Site&rdquo; shows how to change your blog&rsquo;s appearance and add functionality.</p>

<!-- more -->


<h2>Create a Post</h2>

<p>Open a bash shell and type:
<code>ruby Set some environment variables https://michaeljcarey.github.io Source Article
source ~/.bash_profile
</code></p>

<p>Create a new post:
Blog posts are located in source/_posts.
They follow a naming convention as: &lsquo;YYYY-MM-DD-post-title.markdown&rsquo;
<code>ruby Create a New Post https://michaeljcarey.github.io Source Article
rake new_post["title"]
</code></p>

<h2>EDIT THE POST FILE</h2>

<p>Open the post file located in &lsquo;source/_posts&rsquo; with your favorite editor.  I am currently using gedit.
The post file has header information in yaml.  You may edit that information.</p>

<p>Categories are used to classify your post.  Search Engines key off of them.  You can place the categories in the side bar and you can filter your posts by category
<figure class='code'><figcaption><span>Category Syntax <a href="https://michaeljcarey.github.io">https://michaeljcarey.github.io</a> Source Article</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">one</span> <span class="n">category</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;categories: Sass&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">multiple</span> <span class="n">categories</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;categories: [CSS3, Sass, Media Queries]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Place Text</h2>

<p>I have put some junk text that I thought was a comment at the bottom of this post.  As I learn more, I will put at the top.</p>

<h2>what is &lt;! &ndash;more&ndash;!></h2>

<p>This tag tells the blog site where to stop showing your post.  This way your older posts can show just the beginning paragraph which makes it easier to scroll down and see all of the older posts.</p>

<h2>Place an Image</h2>

<p>This is an example of how to place an image:  (the image of the cat in the code block is not intended. I will find out how to prevent that later.
<code>ruby How to place an image in Octopress http://octopress.org/docs/plugins/image-tag/ Source Article
<img class="[class names]" src="/path/to/image" title="[width] [height] [title text [alt text]]" >
<img src="http://placekitten.com/890/280">
<img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten">
</code>
Resulting in:</p>

<p><img class="<a" src="href="http://placekitten.com/890/280">http://placekitten.com/890/280</a>">
<img class="left <a" src="href="http://placekitten.com/320/250">http://placekitten.com/320/250</a>" title="Place Kitten #2" >
<img class="right <a" src="href="http://placekitten.com/300/500">http://placekitten.com/300/500</a>" width="150" height="250" title="Place Kitten #3" >
<img class="right <a" src="href="http://placekitten.com/300/500">http://placekitten.com/300/500</a>" width="150" height="250" title="&lsquo;Place Kitten #4&rsquo; &lsquo;An image of a very cute kitten&rsquo;" >
I am having trouble placing all these cats around.  I will learn how to heard these things as soon as I catch my breath.</p>

<p>If I want to link to an image from facebook, I have to right click on the image and copy image location.  Then I can paste that link into my img tag.</p>

<h2>Place a Video</h2>

<p>If you want to place a video, its like so;
<code>ruby Syntax for placing a video https://michaeljcarey.github.io Source Article
<video width='640' height='320' preload='metadata' controls poster='http://s3.imathis.com/video/zero-to-fancy-buttons.png'><source src='http://s3.imathis.com/video/zero-to-fancy-buttons.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video>
</code></p>

<p>And here is how it looks.
<video width='640' height='320' preload='metadata' controls poster='http://s3.imathis.com/video/zero-to-fancy-buttons.png">http://s3.imathis.com/video/zero-to-fancy-buttons.png</a>'><source src='http://s3.imathis.com/video/zero-to-fancy-buttons.mp4">http://s3.imathis.com/video/zero-to-fancy-buttons.mp4</a>' ></video></p>

<h2>Place Code Blocks (text boxes)</h2>

<p>The text box below is essential to displaying code snippets.  This box is pretty powerful due to it syntax highlighting.  Thanks to Avinish Meetoo for the codesnip.
<code>ruby Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article
class Fixnum
  def prime?
    ('1' * self) !~ /^1?$|^(11+?)\1+$/
  end
end
</code>
The box is coded as such:
<figure class='code'><figcaption><span>Easy Code Block Syntax <a href="https://michaeljcarey.github.io">https://michaeljcarey.github.io</a> Source Article</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="sb">``` [language] [title] [url] [link text]&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;class Fixnum&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;def prime?&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;(&amp;lsquo;1&amp;rsquo; * self) !~ /^1?$|^(11+?)</span><span class="se">\1</span><span class="sb">+$/&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;end&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;end&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">&lt;h1&gt;```</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">You can include your own local snippets this way:</span>
</span><span class='line'><span class="sr">File /home/mcarey/octopress/source/downloads/code/class="sx"> could not be found .</span>
</span><span class='line'><span class="sx">Hmmm, too much trouble at the moment.  I am imagining that I would have to put my source under github.  For now, what could be simpler than inlining the snippet as in the bottom example.</span>
</span><span class='line'>
</span><span class='line'><span class="sx">Another slick way to embed code snippets is with Gist.  In this case we get a vdif file gistfile1.diff from the host GitHub.</span>
</span><span class='line'><span class="sx"><div><script src='https://gist.github.com/4321346.js?file=gistfile1.diff'></script>
<noscript><pre><code>@@ -590,7 +590,7 @@ class SpritesTest &lt; Test::Unit::TestCase
  it &quot;should generate a sprite from nested folders&quot; do
    css = render &lt;&lt;-SCSS
-     @import &quot;nested/*.png&quot;;
+     @import &quot;nested/**/*.png&quot;;
      @include all-nested-sprites;
    SCSS
    assert_correct css, &lt;&lt;-CSS</code></pre></noscript></div>
</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">##Launch your Blog Locally or Globally</span>
</span><span class='line'><span class="no">Open</span> <span class="n">a</span> <span class="n">bash</span> <span class="n">shell</span> <span class="ow">and</span> <span class="ss">type</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">source</span> <span class="o">~</span><span class="sr">/.bash_profile</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>To see your output blog, use these commands:
 * &lsquo;generate&rsquo; will generate your blog from source jekyll to html.<br/>
 * &lsquo;deploy&rsquo; will copy the generated files into the _deploy/ folder, then add them to git, commit and push them to the master branch.
 * &lsquo;preview&rsquo; will generate and launch a local web server at at &lsquo;<a href="http://localhost:4000/">http://localhost:4000/</a>&rsquo;
<code>ruby generate launch and preview commands https://michaeljcarey.github.io Source Article
rake generate
rake deploy
rake preview
</code></p>

<p>To commit your source code into github, do the following.
<code>ruby Commit your source code https://michaeljcarey.github.io Source Article
git add .
git commit -m 'your message'
git push origin source
</code></p>
]]></content>
  </entry>
  
</feed>
